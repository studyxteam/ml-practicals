Classify the email using the binary classification method.


....Importing the libraries.....

import pandas as pd
import numpy as np
from sklearn.svm import SVC  #SVC class from sklearn.svm is used to implement a Support Vector Classifier (SVC).
from sklearn.neighbors import KNeighborsClassifier  
from sklearn import metrics  # for evaluating performance of the model

.....Importing the dataset....

df = pd.read_csv("emails.csv")
df
df.head() 
df.shape 
df.columns
df.dtypes
df.describe()

s = df.isnull().sum()    # checking null values
s
s[s>0]

df.isnull().any()
df.dropna(inplace = True)   # dropna()used to drop unnecessary column

df.head()
df.columns

df.Prediction.unique()
df['Prediction'] = df['Prediction'].replace({0:'Not spam', 1:'Spam'})
df

X = df.drop(columns='Prediction',axis = 1)
Y = df['Prediction']

X.columns
Y.head()

from sklearn.preprocessing import scale
X = scale(X)
# split into train and test
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state = 42)

...KNN...

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)

print("Prediction: \n")
print(y_pred)

# Accuracy
M = metrics.accuracy_score(y_test,y_pred)
print("KNN accuracy: ", M)

C = metrics.confusion_matrix(y_test,y_pred)
print("Confusion matrix: ", C)


...SVM Classifier.....

# cost C = 1
model = SVC(C = 1)
# fit
model.fit(X_train, y_train)
# predict
y_pred = model.predict(X_test)

metrics.confusion_matrix(y_true=y_test, y_pred=y_pred)

print("SVM accuracy = ",metrics.accuracy_score(y_test,y_pred))






